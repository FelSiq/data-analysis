?~
;
?
~
;
?formula
~(tl,dr)
'~'(tl,dr)
?'~'
ls
ls()
setwd('./Dropbox/study/AMtries/data-analysis/data-analysis/algae-blossom-problem/')
source('algae.R')
ls()
?lm
lm(a1 ~ ., data=clean.algae)
?lm
?aov
lm(a1 ~ ., data=clean.algae[,1:12])
summary(lm(a1 ~ ., data=clean.algae[,1:12]))
?summary
?anova
anova(lm(a1 ~ ., data=clean.algae[,1:12]))
?step
algae.lm.a1 <- step(lm(a1 ~ ., data=clean.algae[,1:12]))
algae.lm.a1
anova(algae.lm.a1)
summary(algae.lm.a1)
?summary
ls()
?predict
algae.predict.a1 <- predict(algae.lm.a1, clean.algae)
algae.predict.a1
algae.predict.a1[algae.predict.a1 < 0] <- 0;
algae.predict.a1
ls()
mean((algae.predict.a1 - clean.algae[,'a1'])^2)/mean((mean(clean.algae[,'a1']) - clean.algae[,'a1'])^2)
plot(lm.predictions.a1,algae[,'a1'],main="Linear Model",
xlab="Predictions",ylab="True Values")
abline(0,1,lty=2)
plot(algae.predict.a1,clean.algae[,'a1'],main="Linear Model",
xlab="Predictions",ylab="True Values")
abline(0,1,lty=2)
?trainControl
library(caret)
?trainControl
train_control<- trainControl(method="cv", number=10)
model <- train(a1~., data=clean.algae[,1:12], trControl=train_control, method="rpart");
train_control<- trainControl(method="cv", number=10, savePredictions=TRUE);
model <- train(a1~., data=clean.algae[,1:12], trControl=train_control, method="rpart");
predictions<- predict(model, clean.algae[,1:12])
train_control
predictions
confusionMatrix<- confusionMatrix(clean.algae$a1, predictions)
nrow(predictions)
ncol(predictions)
length(predictions)
confusionMatrix<- confusionMatrix(predictions, clean.algae$a1)
model
plot(model)
length(predictions)
length(clean.algae$a1)
confusionMatrix<- confusionMatrix(predictions, clean.algae$a1)
?confusionMatrix
new.algae <- cbind(clean.algae, predictions);
new.algae
rm(new.algae)
ls()
?rpart
rm(train_control)
algae.tree <- rpart(a1 ~ ., data=clean.algae);
plot(algae.tree); text(algae.tree);
algae.tree.predict <- predict(algae.tree, clean.algae);
algae.tree.predict
mean((algae.tree.prediction - clean.algae[,'a1'])^2)/mean((mean(clean.algae[,'a1']) - clean.algae[,'a1'])^2)
ls()
mean((algae.tree.predict - clean.algae[,'a1'])^2)/mean((mean(clean.algae[,'a1']) - clean.algae[,'a1'])^2)
mean((algae.tree.predict - clean.algae[,'a1'])^2)/mean((mean(clean.algae[,'a1']) - clean.algae[,'a1'])^2)
mean((algae.predict.a1 - clean.algae[,'a1'])^2)/mean((mean(clean.algae[,'a1']) - clean.algae[,'a1'])^2);
cross.validation <- function(algae.dirty,algae,n.folds=10) {
n <- nrow(algae.dirty)
idx <- sample(n,n)
algae.dirty <- algae.dirty[idx,]
algae <- algae[idx,]
n.each.part <- n %/% n.folds
perf.lm <- vector()
perf.rt <- vector()
for(i in 1:n.folds) {
cat('Fold ',i,'\n')
out.fold <- ((i-1)*n.each.part+1):(i*n.each.part)
l.model <- lm(a1 ~ .,algae[-out.fold,1:12])
l.model <- step(l.model)
l.model.preds <- predict(l.model,algae[out.fold,1:12])
l.model.preds <- ifelse(l.model.preds < 0,0,l.model.preds)
r.model <- reliable.rpart(a1 ~ .,algae.dirty[-out.fold,1:12])
r.model.preds <- predict(r.model,algae.dirty[out.fold,1:12])
perf.lm[i] <- mean((l.model.preds-algae.dirty[out.fold,'a1'])^2) /
mean((mean(algae.dirty[-out.fold,'a1'])-algae.dirty[out.fold,'a1'])^2)
perf.rt[i] <- mean((r.model.preds-algae.dirty[out.fold,'a1'])^2) /
mean((mean(algae.dirty[-out.fold,'a1'])-algae.dirty[out.fold,'a1'])^2)
}
list(lm=list(avg=mean(perf.lm),std=sd(perf.lm),fold.res=perf.lm),
rt=list(avg=mean(perf.rt),std=sd(perf.rt),fold.res=perf.rt))
}
cross.validation(algae, clean.algae);
library(rpart)
cross.validation <- function(algae.dirty,algae,n.folds=10) {
n <- nrow(algae.dirty)
idx <- sample(n,n)
algae.dirty <- algae.dirty[idx,]
algae <- algae[idx,]
n.each.part <- n %/% n.folds
perf.lm <- vector()
perf.rt <- vector()
for(i in 1:n.folds) {
cat('Fold ',i,'\n')
out.fold <- ((i-1)*n.each.part+1):(i*n.each.part)
l.model <- lm(a1 ~ .,algae[-out.fold,1:12])
l.model <- step(l.model)
l.model.preds <- predict(l.model,algae[out.fold,1:12])
l.model.preds <- ifelse(l.model.preds < 0,0,l.model.preds)
r.model <- reliable.rpart(a1 ~ .,algae.dirty[-out.fold,1:12])
r.model.preds <- predict(r.model,algae.dirty[out.fold,1:12])
perf.lm[i] <- mean((l.model.preds-algae.dirty[out.fold,'a1'])^2) /
mean((mean(algae.dirty[-out.fold,'a1'])-algae.dirty[out.fold,'a1'])^2)
perf.rt[i] <- mean((r.model.preds-algae.dirty[out.fold,'a1'])^2) /
mean((mean(algae.dirty[-out.fold,'a1'])-algae.dirty[out.fold,'a1'])^2)
}
list(lm=list(avg=mean(perf.lm),std=sd(perf.lm),fold.res=perf.lm),
rt=list(avg=mean(perf.rt),std=sd(perf.rt),fold.res=perf.rt))
}
cross.validation(algae, clean.algae);
?reliable.rpart
reliable.rpart <- function(form,data,se=1,cp=0,verbose=T,...) {
tree <- rpart(form,data,cp=cp,...)
if (verbose && ncol(tree$cptable) < 5)
warning("No pruning will be carried out because no estimates were obtained.")
rt.prune(tree,se,verbose)
}
rt.prune <- function(tree,se=1,verbose=T,...) {
if (ncol(tree$cptable) < 5) tree
else {
lin.min.err <- which.min(tree$cptable[,4])
if (verbose && lin.min.err == nrow(tree$cptable))
warning("Minimal Cross Validation Error is obtained
at the largest tree.\n Further tree growth
(achievable through smaller 'cp' parameter value),\n
could produce more accurate tree.\n")
tol.err <- tree$cptable[lin.min.err,4] + se * tree$cptable[lin.min.err,5]
se.lin <- which(tree$cptable[,4] <= tol.err)[1]
prune.rpart(tree,cp=tree$cptable[se.lin,1]+1e-9)
}
}
cross.validation(algae, clean.algae);
cross.validation(algae, clean.algae);
algae.kf10v <- cross.validation(algae, clean.algae);
algae.kf10v
?wilcox.test
wilcox.test(cv10.res$lm$fold.res,cv10.res$rt$fold.res,paired=T)
wilcox.test(algae.kf10v.res$lm$fold.res,algae.kf10v.res$rt$fold.res,paired=T)
wilcox.test(algae.kf10v$lm$fold.res,algae.kf10v$rt$fold.res,paired=T)
algae.test <- read.table('./data/Eval.txt'
dec='.',
header=FALSE,
col.names=c('season','size','speed','mxPH','mnO2','Cl',
'NO3','NH4','oPO4','PO4','Chla'),
na.strings=c('XXXXXXX'));
algae.test <- read.table('./data/Eval.txt',
dec='.',
header=FALSE,
col.names=c('season','size','speed','mxPH','mnO2','Cl',
'NO3','NH4','oPO4','PO4','Chla'),
na.strings=c('XXXXXXX'));
algae.test
which(!complete.cases(algae.test))
clean.algae.test <- set.median(algae.test);
clean.algae.test
which(!complete.cases(clean.algae.test))
?preidtc
?predict
ls()
cat('algae' + 1)
cat('algae' + str(1))
?sprintf
for(i in 1:7){
cat(sprintf('<set SUMMARY FOR ALGAE #\'%d\'></set>\n', i));
summary(lm.models$models[[i]]);
};
lm.all <- function(train, test){
#Create the base of the output
res <- list();
res.models <- list();
res.predics <- list();
#Loops for every type of algae
for(k in 1:7){
#Create a optmized linear model for each algae
result$models[[k]] <- step(lm(as.formula(paste(names(train)[11 + k],'~ .')), 
data=train[, c(1:11, 11 + k)]));
#Predict for every algae
p <- predict(result$models[[k]], test);
#Set negative frequencies to zero
results$predics[[k]] <- ifelse(p < 0, 0, p);
};
return (res);
};
algae.lm.result <- lm.all(clean.algae, clean.algae.test);
#Verify results
for(i in 1:7){
cat(sprintf('<set SUMMARY FOR ALGAE #\'%d\'></set>\n', i));
summary(algae.lm.result$models[[i]]);
};
lm.all <- function(train, test){
#Create the base of the output
res <- list();
res.models <- list();
res.predics <- list();
#Loops for every type of algae
for(k in 1:7){
#Create a optmized linear model for each algae
res$models[[k]] <- step(lm(as.formula(paste(names(train)[11 + k],'~ .')), 
data=train[, c(1:11, 11 + k)]));
#Predict for every algae
p <- predict(res$models[[k]], test);
#Set negative frequencies to zero
results$predics[[k]] <- ifelse(p < 0, 0, p);
};
return (res);
};
algae.lm.result <- lm.all(clean.algae, clean.algae.test);
#Verify results
for(i in 1:7){
cat(sprintf('<set SUMMARY FOR ALGAE #\'%d\'></set>\n', i));
summary(algae.lm.result$models[[i]]);
};
lm.all <- function(train, test){
#Create the base of the output
res <- list();
res.models <- list();
res.predics <- list();
#Loops for every type of algae
for(k in 1:7){
#Create a optmized linear model for each algae
res$models[[k]] <- step(lm(as.formula(paste(names(train)[11 + k],'~ .')), 
data=train[, c(1:11, 11 + k)]));
#Predict for every algae
p <- predict(res$models[[k]], test);
#Set negative frequencies to zero
res$predics[[k]] <- ifelse(p < 0, 0, p);
};
return (res);
};
algae.lm.result <- lm.all(clean.algae, clean.algae.test);
for(i in 1:7){
cat(sprintf('<set SUMMARY FOR ALGAE #\'%d\'></set>\n', i));
summary(algae.lm.result$models[[i]]);
};
for(i in 1:7){
cat(sprintf('SUMMARY FOR ALGAE #\'%d\'>\n', i));
summary(algae.lm.result$models[[i]]);
};
summary(algae.lm.result$models[[i]]);
for(i in 1:7){
cat(sprintf('SUMMARY FOR ALGAE #%d\n', i));
summary(algae.lm.result$models[[i]]);
};
for(i in 1:7){
cat(sprintf('SUMMARY FOR ALGAE #%d\n', i));
cat(summary(algae.lm.result$models[[i]]));
};
rt.all <- function(train, test){
#Create the base of the output
res <- list();
res.models <- list();
res.predics <- list();
#Loops for every type of algae
for(k in 1:7){
#Create a optmized linear model for each algae
res$models[[k]] <- reliable.rpart(as.formula(paste(names(train)[11 + k],'~ .')), 
data=train[, c(1:11, 11 + k)]);
#Predict for every algae
res$predics[[k]] <- predict(res$models[[k]], test);
};
return (res);
};
algae.tree.result <- rt.all(clean.algae, clean.algae.test);
algae.tree.result
plot(algae.tree)
text(algae.tree)
nrow(clean.algae.test)
ncol(clean.algae.test)
?ws
combine.sol <- function(lm.res, tree.res, weight.sol) {
#create final result structure
final <- matrix(nrow=nrow(clean.algae.test), ncol=7);
for(i in 1:7){
weight.lm <- (1 - (weight.sol$lm[i]/(weight.sol$lm[i] - weight.sol$rt[i])));
weight.rt <- (1 - weight.lm);
final[,i] <- weight.lm*lm.res[[i]] + weight.rt*rt.sol[[i]];
};
colnames(final) <- paste('a', 1:7, sep='');
return(final);
};
ls()
algae.kf10v
cv.all <- function(algae.dirty, algae,n.folds=10) {
n <- nrow(algae.dirty)
idx <- sample(n,n)
algae.dirty <- algae.dirty[idx,]
algae <- algae[idx,]
n.each.part <- n %/% n.folds
perf.lm <- matrix(nrow=n.folds,ncol=7)
perf.rt <- matrix(nrow=n.folds,ncol=7)
perf.comb <- matrix(nrow=n.folds,ncol=7)
for(i in 1:n.folds) {
cat('Fold ',i,'\n')
out.fold <- ((i-1)*n.each.part+1):(i*n.each.part)
for(a in 1:7) {
form <- as.formula(paste(names(algae.dirty)[11+a],"~."))
l.model <- lm(form,algae[-out.fold,c(1:11,11+a)])
l.model <- step(l.model)
l.model.preds <- predict(l.model,algae[out.fold,c(1:11,11+a)])
l.model.preds <- ifelse(l.model.preds < 0,0,l.model.preds)
r.model <- reliable.rpart(form,algae.dirty[-out.fold,c(1:11,11+a)])
r.model.preds <- predict(r.model,algae.dirty[out.fold,c(1:11,11+a)])
perf.lm[i,a] <- mean((l.model.preds-algae.dirty[out.fold,11+a])^2) /
mean((mean(algae.dirty[-out.fold,11+a])-algae.dirty[out.fold,11+a])^2)
perf.rt[i,a] <- mean((r.model.preds-algae.dirty[out.fold,11+a])^2) /
mean((mean(algae.dirty[-out.fold,11+a])-algae.dirty[out.fold,11+a])^2)
wl <- 1-perf.lm[i,a]/(perf.lm[i,a]+perf.rt[i,a])
wr <- 1-wl
comb.preds <- wl*l.model.preds + wr*r.model.preds
perf.comb[i,a] <- mean((comb.preds-algae.dirty[out.fold,11+a])^2) /
mean((mean(algae.dirty[-out.fold,11+a])-algae.dirty[out.fold,11+a])^2)
cat(paste("Algal a",a,sep=""),"\tlm=",perf.lm[i,a],"\trt=",
perf.rt[i,a],"\tcomb=",perf.comb[i,a],"\n")
}
}
lm.res <- apply(perf.lm,2,mean)
names(lm.res) <- paste("a",1:7,sep="")
rt.res <- apply(perf.rt,2,mean)
names(rt.res) <- paste("a",1:7,sep="")
comb.res <- apply(perf.comb,2,mean)
names(comb.res) <- paste("a",1:7,sep="")
list(lm=lm.res,rt=rt.res,comb=comb.res)
}
cv.all <- function(algae.dirty, algae,n.folds=10) {
n <- nrow(algae.dirty)
idx <- sample(n,n)
algae.dirty <- algae.dirty[idx,]
algae <- algae[idx,]
n.each.part <- n %/% n.folds
perf.lm <- matrix(nrow=n.folds,ncol=7)
perf.rt <- matrix(nrow=n.folds,ncol=7)
perf.comb <- matrix(nrow=n.folds,ncol=7)
for(i in 1:n.folds) {
cat('Fold ',i,'\n')
out.fold <- ((i-1)*n.each.part+1):(i*n.each.part)
for(a in 1:7) {
form <- as.formula(paste(names(algae.dirty)[11+a],"~."))
l.model <- lm(form,algae[-out.fold,c(1:11,11+a)])
l.model <- step(l.model)
l.model.preds <- predict(l.model,algae[out.fold,c(1:11,11+a)])
l.model.preds <- ifelse(l.model.preds < 0,0,l.model.preds)
r.model <- reliable.rpart(form,algae.dirty[-out.fold,c(1:11,11+a)])
r.model.preds <- predict(r.model,algae.dirty[out.fold,c(1:11,11+a)])
perf.lm[i,a] <- mean((l.model.preds-algae.dirty[out.fold,11+a])^2) /
mean((mean(algae.dirty[-out.fold,11+a])-algae.dirty[out.fold,11+a])^2)
perf.rt[i,a] <- mean((r.model.preds-algae.dirty[out.fold,11+a])^2) /
mean((mean(algae.dirty[-out.fold,11+a])-algae.dirty[out.fold,11+a])^2)
wl <- 1-perf.lm[i,a]/(perf.lm[i,a]+perf.rt[i,a])
wr <- 1-wl
comb.preds <- wl*l.model.preds + wr*r.model.preds
perf.comb[i,a] <- mean((comb.preds-algae.dirty[out.fold,11+a])^2) /
mean((mean(algae.dirty[-out.fold,11+a])-algae.dirty[out.fold,11+a])^2)
cat(paste("Algal a",a,sep=""),"\tlm=",perf.lm[i,a],"\trt=",
perf.rt[i,a],"\tcomb=",perf.comb[i,a],"\n")
}
}
lm.res <- apply(perf.lm,2,mean)
names(lm.res) <- paste("a",1:7,sep="")
rt.res <- apply(perf.rt,2,mean)
names(rt.res) <- paste("a",1:7,sep="")
comb.res <- apply(perf.comb,2,mean)
names(comb.res) <- paste("a",1:7,sep="")
list(lm=lm.res,rt=rt.res,comb=comb.res)
};
algae.kf10v.all <- cv.all(algae, clean.algae);
ls
ls()
algae.kf10v.all
algae.final <- combine.sol(algae.lm.result$predics, algae.tree.result$predics, algae.kf10v.all);
combine.sol <- function(lm.res, tree.res, weight.sol) {
#create final result structure
final <- matrix(nrow=nrow(clean.algae.test), ncol=7);
for(i in 1:7){
weight.lm <- (1 - (weight.sol$lm[i]/(weight.sol$lm[i] - weight.sol$rt[i])));
weight.rt <- (1 - weight.lm);
final[,i] <- weight.lm*lm.res[[i]] + weight.rt*tree.res[[i]];
};
colnames(final) <- paste('a', 1:7, sep='');
return(final);
};
algae.final <- combine.sol(algae.lm.result$predics, algae.tree.result$predics, algae.kf10v.all);
algae.final
summary(algae.final)
combine.sol <- function(lm.res, tree.res, weight.sol) {
#create final result structure
final <- matrix(nrow=nrow(clean.algae.test), ncol=7);
for(i in 1:7){
weight.lm <- (1 - (weight.sol$lm[i]/(weight.sol$lm[i] + weight.sol$rt[i])));
weight.rt <- (1 - weight.lm);
final[,i] <- weight.lm*lm.res[[i]] + weight.rt*tree.res[[i]];
};
colnames(final) <- paste('a', 1:7, sep='');
return(final);
};
algae.final <- combine.sol(algae.lm.result$predics, algae.tree.result$predics, algae.kf10v.all);
summary(algae.final)
head(algae.final)
baseline.preds <- apply(algae[,paste('a',1:7,sep='')],2,mean)
base.sq.errs <- (matrix(rep(baseline.preds,nrow(algae.sols)),byrow=T,ncol=T) - algae.sols)^2
apply(sq.errs,2,mean)/apply(base.sq.errs,2,mean);
?apply
algae.spoiler <- read.table('./data/Sols.txt',
dec ='.',
header=FALSE,
col.names=c('a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7'),
na.strings=c('XXXXXXX'));
algae.spoiler
sq.errs <- (final - algae.spoiler)^2;
sq.errs <- (algae.final - algae.spoiler)^2;
#Absolute error (modulus)
abs.errs <- abs(algae.final - algae.spoiler);
#MSE (Mean Squared Error)
apply(sq.errs, 2, mean);
apply(abs.errs, 2, mean);
baseline.preds <- apply(algae[,paste('a', 1:7, sep='')], 2, mean);
baseline.preds
base.sq.errs <- ((matrix(rep(baseline.preds,nrow(algae.sols)), byrow=T, ncol=T) - algae.sols)^2);
base.sq.errs <- ((matrix(rep(baseline.preds,nrow(algae.spoiler)), byrow=T, ncol=T) - algae.spoiler)^2);
apply(sq.errs, 2, mean)/apply(base.sq.errs, 2, mean);
ls()
algae.lm.result$predics
algae.lm.result$predics[[1]]
aux.lm.preds <- matrix(nrow=7, nrow=140);
for(i in 1:7)
aux.lm.preds[,i] <- algae.lm.result$predics[[i]];
lm.sq.errs <- (aux.lm.preds -algae.spoiler)^2;
apply(lm.sq.errs,2,mean)/apply(sq.errs,2,mean);
aux.lm.preds <- matrix(ncol=7, nrow=140);
for(i in 1:7)
aux.lm.preds[,i] <- algae.lm.result$predics[[i]];
lm.sq.errs <- (aux.lm.preds -algae.spoiler)^2;
apply(lm.sq.errs,2,mean)/apply(sq.errs,2,mean);
aux.tree.preds <- matrix(ncol=7, nrow=140);
for(i in 1:7)
aux.tree.preds[,i] <- algae.tree.result$predics[[i]];
tree.sq.errs <- (aux.tree.preds -algae.spoiler)^2;
apply(tree.sq.errs,2,mean)/apply(sq.errs,2,mean);
apply(sq.errs, 2, mean)/apply(base.sq.errs, 2, mean);
sort(apply(sq.errs, 2, mean)/apply(base.sq.errs, 2, mean));
quit()
